(defun demo()
    (setq fp (open "theString.txt" :direction :input))
    (setq L (read fp "done"))
    (princ L)
    (FSA L 0)
)

(defun FSA (L S)
    (cond ((NULL L) NIL)  
        ((EQUAL (FSA_EVAL L S) 1) 
            (FORMAT T "\n~% Accepted"))
        ((EQUAL (FSA_EVAL L S) 3) 
            (FORMAT T "\n~% Accepted"))
        (T (FORMAT T "\n~% Declined"))
    )    
)

(defun FSA_EVAL (L S)
    (print "\n")
    (print L)
    (FORMAT T "~%  | current_state: ~d"  s)
    (FORMAT T "~%  | current_char: ~s" (CAR L))
    (cond ((NULL L) S)
        ((EQUAL 0 S)
            (FSA_EVAL (CDR L) (ZERO_NEXT (CAR L)))
        )
        ((EQUAL 1 S)
            (FSA_EVAL (CDR L) (ONE_NEXT (CAR L)))
        )
        ((EQUAL 2 S)
            (FSA_EVAL (CDR L) (TWO_NEXT (CAR L)))
        )
        ((EQUAL 3 S)
            (FSA_EVAL (CDR L) (THREE_NEXT (CAR L)))
        )
        ((EQUAL 4 S)
            (FSA_EVAL (CDR L) (FOUR_NEXT (CAR L)))
        )
        (T S)
    )
)

(defun ZERO_NEXT (input)
    (cond ((NULL input) NIL)
        ((EQUAL input `X) (RETURN-FROM ZERO_NEXT 0)) 
        ((EQUAL input `Y) (RETURN-FROM ZERO_NEXT 1))
    )
)

(defun ONE_NEXT (input)
    (cond ((NULL input) NIL)
        ((EQUAL input `X) (RETURN-FROM ONE_NEXT 2)) 
    )
)

(defun TWO_NEXT (input)
    (cond ((NULL input) NIL)
        ((EQUAL input `X) (RETURN-FROM TWO_NEXT 2)) 
        ((EQUAL input `Y) (RETURN-FROM TWO_NEXT 3))
    )
)

(defun THREE_NEXT (input)
    (cond ((NULL input) NIL)
        ((EQUAL input `X) (RETURN-FROM THREE_NEXT 3)) 
        ((EQUAL input `Z) (RETURN-FROM THREE_NEXT 4))
    )
)

(defun FOUR_NEXT (input)
    (cond ((NULL input) NIL)
        ((EQUAL input `X) (RETURN-FROM FOUR_NEXT 4)) 
        ((EQUAL input `A) (RETURN-FROM FOUR_NEXT 1))
    )
)